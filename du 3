#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

char* vigenere_encrypt(const char* key, const char* text) {
    if (key == NULL || text == NULL) {
        return NULL;
    }

    int text_len = strlen(text);
    int key_len = strlen(key);
    char* encrypted = malloc(text_len + 1);

    for (int i = 0; i < text_len; i++) {
        char c = toupper(text[i]);
        if (c >= 'A' && c <= 'Z') {
            char k = toupper(key[i % key_len]);
            encrypted[i] = ((c - 'A') + (k - 'A')) % 26 + 'A';
        } else {
            encrypted[i] = c;
        }
    }

    encrypted[text_len] = '\0';
    return encrypted;
}

char* vigenere_decrypt(const char* key, const char* text) {
    if (key == NULL || text == NULL) {
        return NULL;
    }

    int text_len = strlen(text);
    int key_len = strlen(key);
    char* decrypted = malloc(text_len + 1);

    for (int i = 0; i < text_len; i++) {
        char c = toupper(text[i]);
        if (c >= 'A' && c <= 'Z') {
            char k = toupper(key[i % key_len]);
            decrypted[i] = ((c - 'A') - (k - 'A') + 26) % 26 + 'A';
        } else {
            decrypted[i] = c;
        }
    }

    decrypted[text_len] = '\0';
    return decrypted;
}

int main() {
    char* encrypted = vigenere_encrypt("KEY", "Hello world!");
    printf("%s\n", encrypted);

    char* decrypted = vigenere_decrypt("KEY", encrypted);
    printf("%s\n", decrypted);

    free(encrypted);
    free(decrypted);
    return 0;
}
